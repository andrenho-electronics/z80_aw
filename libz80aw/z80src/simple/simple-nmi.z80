VIDEO	 = 0x0
KEYBOARD = 0x1
	
	ld	sp, 0xfffe		; setup stack in RAM
	jp	main			; skip interrupt area

	;
	; keyboard interrupt
	;
	org 0x8
	in 	a, (KEYBOARD)		; read pressed key
	out	(VIDEO), a		; print pressed key
	ei				; reenable interrupts
	reti

	;
	; register loading debugger procedure
	;
	org  0x66			; NMI location

	; push register into the stack
	push	af		; AF
	push	bc		; BC
	push	de		; DE
	push	hl		; HL
	ex	af, af'		; exchange for second set of registers
	exx
	push	af		; AF'
	push	bc		; BC'
	push	de		; DE'
	push	hl		; HL'
	push	ix		; IX
	push	iy		; IY
	ld	a, i		; makes BC' = I, R (A, B & C are lost)
	ld	b, a
	ld	a, r
	ld	c, a
	push	bc		; IR
	
	; call controller, passing SP
	ld	hl, 0
	add	hl, sp		; load SP
	ld	a, l
	out	(0xfe), a	; 0xFE -> lower nibble of SP
	ld	a, h
	out	(0xff), a	; 0xFF -> higher nibble of SP
	                        ; calling 0xFF makes the controller load the data

	; restore registers and stack
	pop	af		; discard IR
	pop	iy		; IY
	pop	ix		; IX
	pop	hl		; HL'
	pop	de		; DE'
	pop	bc		; BC'
	pop	af		; AF'
	ex	af, af'		; exchange for first set of registers
	exx
	pop	hl		; HL
	pop	de		; DE
	pop	bc		; BC
	pop	af		; AF

	retn

	;
	; main procedure
	;
main:
	im	0			; set interrupt type
	ei				; enable interrupts

	ld	a, '?'			; print question mark
	out	(VIDEO), a
	ld	a, ' '
	out	(VIDEO), a

.continue:
	halt				; wait for keypress		
	jp	.continue
	

; vim:ts=8:sts=8:sw=8:noexpandtab
