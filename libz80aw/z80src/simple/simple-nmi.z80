	ld	sp, 0x100		; setup stack in RAM
	jp	main			; skip interrupt area

	;
	; register loading debugger procedure
	;
	org	0x66			; NMI location

	; push register into the stack
	push	af		; AF
	push	bc		; BC
	push	de		; DE
	push	hl		; HL
	ex	af, af'		; exchange for second set of registers
	exx
	push	af		; AF'
	push	bc		; BC'
	push	de		; DE'
	push	hl		; HL'
	push	ix		; IX
	push	iy		; IY
	ld	a, i		; makes BC' = I, R (A, B & C are lost)
	ld	b, a
	ld	a, r
	ld	c, a
	push	bc		; IR
	
	; call controller, passing SP
	ld	hl, 0
	add	hl, sp		; load SP
	ld	a, l
	out	(0xfe), a	; 0xFE -> lower nibble of SP
	ld	a, h
	out	(0xff), a	; 0xFF -> higher nibble of SP
	                        ; calling 0xFF makes the controller load the data

	; restore registers and stack
	pop	af		; discard IR
	pop	iy		; IY
	pop	ix		; IX
	pop	hl		; HL'
	pop	de		; DE'
	pop	bc		; BC'
	pop	af		; AF'
	ex	af, af'		; exchange for first set of registers
	exx
	pop	hl		; HL
	pop	de		; DE
	pop	bc		; BC
	pop	af		; AF

	retn

	;
	; main procedure
	;
main:
        ld	a, 0xa
        ld	bc, 0xbc
        ld	de, 0x0
        ld	hl, 0x0
        ex	af, af'
        exx
        ld	bc, 0
        ld	hl, 0x41
        ld	a, 0x1
        ld	i, a
        ld	de, 0xde
        ld	ix, 0x0
        ld	iy, 0x9f
cc:	jp cc

; vim:ts=8:sts=8:sw=8:noexpandtab
