#!/usr/bin/env python3

import argparse
import random
import serial

# pySerial required!

def run_tests(ser, nbytes):
    numbers = [int(random.random() * 256) for x in range(nbytes)]
    print(numbers)
    # enter programming mode
    print('Entering programming mode...')
    ser.write(bytearray('u %x\r' % nbytes, 'latin1'))
    ser.flush()
    ser.readline()    # read own written line
    if ser.readline().decode('latin1').strip() != 'ok':
        raise Exception('Could not enter programming mode.')
    # write bytes
    print('Writing bytes...')
    for i in range(nbytes):
        print('%x\r' % numbers[i])
        ser.write(bytearray('%x\r' % numbers[i], 'latin1'))
        ser.flush()
    # read back bytes
    print('Verifying...')
    for i in range(nbytes):
        s = ser.readline().decode('latin1')
        print(s)
        found = int(s, 16)
        if found != numbers[i]:
            raise Exception('Verification error: address 0x%X, expected %02X, found %02X' % (i, numbers[i], found))

#
# main procedue
#

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--device', type=str, default='/dev/ttyUSB0', help='USB device (default: /dev/ttyUSB0)')
parser.add_argument('-t', '--test', type=int, help='Test memory (write and verify the whole memory), passing the number of bytes to test')
args = parser.parse_args()


with serial.Serial(args.device, 38400, timeout=5) as ser:
    if args.test != None:
        run_tests(ser, args.test)
    ser.close()

