#!/usr/bin/env python3

import os
import serial
import sys
import time

PROGRAMMING = 0xfe
ACK         = 0x1

def to_int_array(b):
    return [x for x in b]

class MySerial:
    def __init__(self, port):
        self.serial = serial.Serial(port, 114583, timeout=1)

    def send(self, data):
        if type(data) == int:
            self.serial.write(bytes([data]))

    def recv_as_int(self, n_bytes=1):
        if n_bytes == 1:
            return int(self.serial.read())

    def recv16(self):
        r = self.recv_as_int()
        r |= self.recv_as_int() << 8
        return r


# Print iterations progress
def printProgressBar (iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = 'â–ˆ', printEnd = "\r"):
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print(f'\r{prefix} |{bar}| {percent}% {suffix}', end = printEnd)
    # Print New Line on Complete
    if iteration == total: 
        print()


def break_file_in_64_byte_blocks(contents):
    blocks = []
    for b in range(0, len(contents), 64):
        blocks.append(contents[(b * 64) : ((b + 1) * 64)])
    return blocks


def checksum(block):
    checksum1 = 0
    checksum2 = 0
    for b in to_int_array(block):
        checksum1 = (checksum1 + b) % 255
        checksum2 = (checksum2 + checksum1) % 255
    return checksum1 | (checksum2 << 8)

#
# MAIN
#

# get arguments
port = '/dev/ttyUSB0'
if len(sys.argv) > 2:
    print('Usage: ' + sys.argv[0] + ' [SERIAL_PORT] < FILE')
    sys.exit()
elif len(sys.argv) == 2:
    if sys.argv[1] == '-h':
        print('Usage: ' + sys.argv[0] + ' [SERIAL_PORT] < FILE')
        sys.exit()
    else:
        port = sys.argv[1]


with MySerial(port) as ser:

    contents = sys.stdin.buffer.read()
    if len(contents) >= 32 * 1024:
        print('File must be smaller than ROM (32k).')
        sys.exit(1)

    # negotiate
    ser.send(PROGRAMMING)
    r = ser.recv_as_int()
    if r != ACK:
        print('Error writing to controller: ' + str(r))
        sys.exit(1)

    ser.send16(0)  # initial address
    r = ser.recv_as_int()
    if r != ACK:
        print('Error writing to controller: ' + str(r))
        sys.exit(1)

    # separate file in blocks
    blocks = break_file_in_64_byte_blocks(contents)

    # send blocks
    invalid_blocks = []
    for i, block in enumerate(blocks):
        printProgressBar(i + 1, len(blocks), prefix='Upload:', suffix='Complete', decimals=0)
        chk = checksum(block)
        ser.send(len(block))
        ser.send(block)
        if ser.recv16() != chk:
            invalid_blocks.append(i)

    # TODO - finish
    ser.send(0)

#page_number = 0
    #for page in range(0, len(contents), 64):
    #    printProgressBar(page_number * 64, len(contents), prefix='Upload:', suffix='Complete', decimals=0)
    #    ser.write(bytes(contents[(page * 64) : ((page + 1) * 64])))
    #    pass

'''
    print('Sending UPLOAD command...')
    ser.write(UPLOAD)
    r = ser.read()
    if r == b'\x00':
        print('Writing file to controller...')
    else:
        print(r)
        print('Cannot write file. Maybe the bus is busy?')
        sys.exit(1)
    i = 1
    ser.timeout = 20
    for byte in contents:
        printProgressBar(i, len(contents), prefix='Upload:', suffix='Complete', decimals=0)
        ser.write(bytes([byte]))
        print(ser.read())
        i += 1

    time.sleep(1)
    print('Verifying upload...')
    ser.write(DOWNLOAD)
    r = ser.read()
    if r == b'\x00':
        print('Reading file from controller...')
    else:
        print(r)
        print('Cannot read file. Maybe the bus is busy?')
        sys.exit(1)
    ser.write(bytes([len(contents) & 0xff, len(contents) >> 8]))
    response = bytearray()
    i = 1
    for byte in contents:
        printProgressBar(i, len(contents), prefix='Downloading:', suffix='Complete', decimals=0)
        response.extend(ser.read())
        i += 1
    print()

    if bytes(response) == contents:
        print('File uploaded successfully.')
    else:
        print('The verification does not match. Will now rewrite incorrect bytes.')
        ser.timeout = 30
        for i, b in enumerate(bytes(response)):
            if b != contents[i]:
                print('[' + hex(i) + ']: expected ' + hex(contents[i]) + ', found ' + hex(b) + '. Rewritting...')
                ser.write(WRITE)
                ser.write(bytes([i & 0xff, i >> 8, contents[i]]))
                r = ser.read()
                if r != b'\x00':
                    print('Invalid response from write (' + str(r) + ')')
                    sys.exit(1)
        print('Bytes rewritten successfully.')
        '''
