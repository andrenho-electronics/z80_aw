#!/usr/bin/env python3

import os
import serial
import sys
import time

BELL     = bytes('\a', 'latin1')
ENTER    = bytes('\n', 'latin1')
UPLOAD   = bytes([128])
DOWNLOAD = bytes([129])
WRITE    = bytes([130])

# Print iterations progress
def printProgressBar (iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = 'â–ˆ', printEnd = "\r"):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
        printEnd    - Optional  : end character (e.g. "\r", "\r\n") (Str)
    """
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print(f'\r{prefix} |{bar}| {percent}% {suffix}', end = printEnd)
    # Print New Line on Complete
    if iteration == total: 
        print()

# get arguments
port = '/dev/ttyUSB0'
if len(sys.argv) > 2:
    print('Usage: ' + sys.argv[0] + ' [SERIAL_PORT] < FILE')
    sys.exit()
elif len(sys.argv) == 2:
    if sys.argv[1] == '-h':
        print('Usage: ' + sys.argv[0] + ' [SERIAL_PORT] < FILE')
        sys.exit()
    else:
        port = sys.argv[1]

# open connection and get ready
with serial.Serial(port, 38400, timeout=1) as ser:
    print('Connected to controller! Reading file from stdin...')

    contents = sys.stdin.buffer.read()
    if len(contents) >= 32 * 1024:
        print('File must be smaller than ROM (32k).')
        sys.exit(1)

    print('Sending UPLOAD command...')
    ser.write(UPLOAD)
    r = ser.read()
    if r == b'\x00':
        print('Writing file to controller...')
    else:
        print(r)
        print('Cannot write file. Maybe the bus is busy?')
        sys.exit(1)
    ser.write(bytes([len(contents) & 0xff, len(contents) >> 8]))
    i = 1
    for byte in contents:
        printProgressBar(i, len(contents), prefix='Upload:', suffix='Complete', decimals=0)
        ser.write(bytes([byte]))
        ser.read()
        i += 1

    time.sleep(1)
    print('Verifying upload...')
    ser.write(DOWNLOAD)
    r = ser.read()
    if r == b'\x00':
        print('Reading file from controller...')
    else:
        print(r)
        print('Cannot read file. Maybe the bus is busy?')
        sys.exit(1)
    ser.write(bytes([len(contents) & 0xff, len(contents) >> 8]))
    response = bytearray()
    i = 1
    for byte in contents:
        printProgressBar(i, len(contents), prefix='Downloading:', suffix='Complete', decimals=0)
        response.extend(ser.read())
        i += 1
    print()

    if bytes(response) == contents:
        print('File uploaded successfully.')
    else:
        print('The verification does not match. Will now rewrite incorrect bytes.')
        for i, b in enumerate(bytes(response)):
            if b != contents[i]:
                print('[' + hex(i) + ']: expected ' + hex(contents[i]) + ', found ' + hex(b) + '. Rewritting...')
                ser.write(WRITE)
                ser.write(bytes([i & 0xff, i >> 8, contents[i]]))
                r = ser.read()
                if r != b'\x00':
                    print('Invalid response from write (' + str(r) + ')')
                    sys.exit(1)
        print('Bytes rewritten successfully.')
