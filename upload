#!/usr/bin/env python3

import os
import serial
import sys
import time

PROGRAMMING = 0xfe
ACK         = 0x1

def to_int_array(b):
    return [x for x in b]

class MySerial:
    def __init__(self, port):
        self.serial = serial.Serial(port, 114583, timeout=None)

    def send(self, data):
        if type(data) == int:
            self.serial.write(bytes([data]))
        else:
            self.serial.write(data)

    def send16(self, data):
        self.send(data & 0xff)
        self.send((data >> 8) & 0xff)

    def recv_as_int(self, n_bytes=1):
        if n_bytes == 1:
            return int.from_bytes(self.serial.read(), 'little')

    def recv16(self):
        r = self.recv_as_int()
        r |= self.recv_as_int() << 8
        return r

    def set_timeout(self, t):
        ser.timeout = t


# Print iterations progress
def printProgressBar (iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = 'â–ˆ', printEnd = "\r"):
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print(f'\r{prefix} |{bar}| {percent}% {suffix}', end = printEnd)
    # Print New Line on Complete
    if iteration == total: 
        print()


def break_file_in_64_byte_blocks(contents):
    blocks = []
    for b in range(0, len(contents), 64):
        blocks.append(contents[(b * 64) : ((b + 1) * 64)])
    return blocks


def checksum(block):
    checksum1 = 0
    checksum2 = 0
    for b in to_int_array(block):
        checksum1 = (checksum1 + b) % 255
        checksum2 = (checksum2 + checksum1) % 255
    return checksum1 | (checksum2 << 8)

#
# MAIN
#

# get arguments
port = '/dev/ttyUSB0'
if len(sys.argv) > 2:
    print('Usage: ' + sys.argv[0] + ' [SERIAL_PORT] < FILE')
    sys.exit()
elif len(sys.argv) == 2:
    if sys.argv[1] == '-h':
        print('Usage: ' + sys.argv[0] + ' [SERIAL_PORT] < FILE')
        sys.exit()
    else:
        port = sys.argv[1]

print('Opening connection...')
ser = MySerial(port)

print('Reading file contents...')
contents = sys.stdin.buffer.read()
if len(contents) >= 32 * 1024:
    print('File must be smaller than ROM (32k).')
    sys.exit(1)

# negotiate
print('Sending programming command...')
ser.send(PROGRAMMING)
r = ser.recv_as_int()
if r != ACK:
    print('Error writing to controller: ' + str(r))
    sys.exit(1)

print('Sending initial address...')
ser.send16(0)  # initial address
r = ser.recv_as_int()
if r != ACK:
    print('Error writing to controller: ' + str(r))
    sys.exit(1)

ser.set_timeout(None)

# separate file in blocks
print('Breaking file in blocks...')
blocks = break_file_in_64_byte_blocks(contents)

# send blocks
print('Sending bytes...')
invalid_blocks = []
for i, block in enumerate(blocks):
    # printProgressBar(i + 1, len(blocks), prefix='Upload:', suffix='Complete', decimals=0)
    chk = checksum(block)
    ser.send(len(block))
    ser.send(block)
    remote_chk = ser.recv16()
    print(chk, remote_chk)
    if remote_chk != chk:
        invalid_blocks.append(i)

# TODO - finish
print('Finished, finalizing write...')
ser.send(0)
ser.send(0)
r = ser.recv_as_int()
if r != ACK:
    print('Error writing to controller: ' + str(r))
    sys.exit(1)


#page_number = 0
    #for page in range(0, len(contents), 64):
    #    printProgressBar(page_number * 64, len(contents), prefix='Upload:', suffix='Complete', decimals=0)
    #    ser.write(bytes(contents[(page * 64) : ((page + 1) * 64])))
    #    pass

